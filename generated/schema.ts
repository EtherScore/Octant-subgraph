// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class OctantEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OctantEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OctantEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OctantEvent", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OctantEvent | null {
    return changetype<OctantEvent | null>(
      store.get_in_block("OctantEvent", id),
    );
  }

  static load(id: string): OctantEvent | null {
    return changetype<OctantEvent | null>(store.get("OctantEvent", id));
  }

  get id(): i64 {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set id(value: i64) {
    this.set("id", Value.fromI64(value));
  }

  get type(): i64 {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set type(value: i64) {
    this.set("type", Value.fromI64(value));
  }

  get depositBeforeLock(): BigInt | null {
    let value = this.get("depositBeforeLock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depositBeforeLock(value: BigInt | null) {
    if (!value) {
      this.unset("depositBeforeLock");
    } else {
      this.set("depositBeforeLock", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountLock(): BigInt {
    let value = this.get("amountLock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountLock(value: BigInt) {
    this.set("amountLock", Value.fromBigInt(value));
  }

  get whenLock(): BigInt | null {
    let value = this.get("whenLock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set whenLock(value: BigInt | null) {
    if (!value) {
      this.unset("whenLock");
    } else {
      this.set("whenLock", Value.fromBigInt(<BigInt>value));
    }
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get depositBeforeUnlock(): BigInt | null {
    let value = this.get("depositBeforeUnlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set depositBeforeUnlock(value: BigInt | null) {
    if (!value) {
      this.unset("depositBeforeUnlock");
    } else {
      this.set("depositBeforeUnlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountUnlock(): BigInt {
    let value = this.get("amountUnlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountUnlock(value: BigInt) {
    this.set("amountUnlock", Value.fromBigInt(value));
  }

  get whenUnlock(): BigInt | null {
    let value = this.get("whenUnlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set whenUnlock(value: BigInt | null) {
    if (!value) {
      this.unset("whenUnlock");
    } else {
      this.set("whenUnlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): i64 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toTimestamp();
    }
  }

  set timestamp(value: i64) {
    this.set("timestamp", Value.fromTimestamp(value));
  }

  get isLock(): i64 {
    let value = this.get("isLock");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set isLock(value: i64) {
    this.set("isLock", Value.fromI64(value));
  }

  get isUnlock(): i64 {
    let value = this.get("isUnlock");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set isUnlock(value: i64) {
    this.set("isUnlock", Value.fromI64(value));
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): User | null {
    return changetype<User | null>(
      store.get_in_block("User", id.toHexString()),
    );
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get balanceLocked(): BigInt {
    let value = this.get("balanceLocked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balanceLocked(value: BigInt) {
    this.set("balanceLocked", Value.fromBigInt(value));
  }

  get isBalancePositive(): i64 {
    let value = this.get("isBalancePositive");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set isBalancePositive(value: i64) {
    this.set("isBalancePositive", Value.fromI64(value));
  }

  get totalLockedAmount(): BigInt {
    let value = this.get("totalLockedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLockedAmount(value: BigInt) {
    this.set("totalLockedAmount", Value.fromBigInt(value));
  }

  get totalUnlockedAmount(): BigInt {
    let value = this.get("totalUnlockedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUnlockedAmount(value: BigInt) {
    this.set("totalUnlockedAmount", Value.fromBigInt(value));
  }

  get OctantEvents(): OctantEventLoader {
    return new OctantEventLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "OctantEvents",
    );
  }
}

export class CumulativeDailyStat extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CumulativeDailyStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CumulativeDailyStat must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CumulativeDailyStat", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CumulativeDailyStat | null {
    return changetype<CumulativeDailyStat | null>(
      store.get_in_block("CumulativeDailyStat", id.toHexString()),
    );
  }

  static load(id: Bytes): CumulativeDailyStat | null {
    return changetype<CumulativeDailyStat | null>(
      store.get("CumulativeDailyStat", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get isAdded(): boolean {
    let value = this.get("isAdded");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAdded(value: boolean) {
    this.set("isAdded", Value.fromBoolean(value));
  }

  get CurrentIndex(): BigInt {
    let value = this.get("CurrentIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set CurrentIndex(value: BigInt) {
    this.set("CurrentIndex", Value.fromBigInt(value));
  }

  get CumulativeDepositsCount(): BigInt {
    let value = this.get("CumulativeDepositsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set CumulativeDepositsCount(value: BigInt) {
    this.set("CumulativeDepositsCount", Value.fromBigInt(value));
  }

  get CumulativeWithdrawalsCount(): BigInt {
    let value = this.get("CumulativeWithdrawalsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set CumulativeWithdrawalsCount(value: BigInt) {
    this.set("CumulativeWithdrawalsCount", Value.fromBigInt(value));
  }

  get CumulativeDepositAmount(): BigInt {
    let value = this.get("CumulativeDepositAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set CumulativeDepositAmount(value: BigInt) {
    this.set("CumulativeDepositAmount", Value.fromBigInt(value));
  }

  get CumulativeWithdrawAmount(): BigInt {
    let value = this.get("CumulativeWithdrawAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set CumulativeWithdrawAmount(value: BigInt) {
    this.set("CumulativeWithdrawAmount", Value.fromBigInt(value));
  }

  get CurrentTotalGLMStaked(): BigInt {
    let value = this.get("CurrentTotalGLMStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set CurrentTotalGLMStaked(value: BigInt) {
    this.set("CurrentTotalGLMStaked", Value.fromBigInt(value));
  }

  get TotalUsers(): BigInt {
    let value = this.get("TotalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set TotalUsers(value: BigInt) {
    this.set("TotalUsers", Value.fromBigInt(value));
  }

  get CurrentTotalUsers(): BigInt {
    let value = this.get("CurrentTotalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set CurrentTotalUsers(value: BigInt) {
    this.set("CurrentTotalUsers", Value.fromBigInt(value));
  }

  get AverageDailyDeposits(): BigDecimal {
    let value = this.get("AverageDailyDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set AverageDailyDeposits(value: BigDecimal) {
    this.set("AverageDailyDeposits", Value.fromBigDecimal(value));
  }

  get AverageDailyGLMDeposits(): BigDecimal {
    let value = this.get("AverageDailyGLMDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set AverageDailyGLMDeposits(value: BigDecimal) {
    this.set("AverageDailyGLMDeposits", Value.fromBigDecimal(value));
  }

  get AverageDailyWithdrawals(): BigDecimal {
    let value = this.get("AverageDailyWithdrawals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set AverageDailyWithdrawals(value: BigDecimal) {
    this.set("AverageDailyWithdrawals", Value.fromBigDecimal(value));
  }

  get AverageDailyGLMWithdrawals(): BigDecimal {
    let value = this.get("AverageDailyGLMWithdrawals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set AverageDailyGLMWithdrawals(value: BigDecimal) {
    this.set("AverageDailyGLMWithdrawals", Value.fromBigDecimal(value));
  }

  get AverageDailyUsers(): BigDecimal {
    let value = this.get("AverageDailyUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set AverageDailyUsers(value: BigDecimal) {
    this.set("AverageDailyUsers", Value.fromBigDecimal(value));
  }
}

export class OctantEventLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): OctantEvent[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<OctantEvent[]>(value);
  }
}
